@InProceedings{10.1007/978-3-319-99241-9_9,
author="Bowers, Kate M.
and Fredericks, Erik M.
and Cheng, Betty H. C.",
editor="Colanzi, Thelma Elita
and McMinn, Phil",
title="Automated Optimization of Weighted Non-functional Objectives in Self-adaptive Systems",
booktitle="Search-Based Software Engineering",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="182--197",
abstract="A self-adaptive system (SAS) can reconfigure at run time in response to adverse combinations of system and environmental conditions in order to continuously satisfy its requirements. Moreover, SASs are subject to cross-cutting non-functional requirements (NFRs), such as performance, security, and usability, that collectively characterize how functional requirements (FRs) are to be satisfied. In many cases, the trigger for adapting an SAS may be due to a violation of one or more NFRs. For a given NFR, different combinations of hierarchically-organized FRs may yield varying degrees of satisfaction (i.e., satisficement). This paper presents Providentia, a search-based technique to optimize NFR satisficement when subjected to various sources of uncertainty (e.g., environment, interactions between system elements, etc.). Providentia searches for optimal combinations of FRs that, when considered with different subgoal decompositions and/or differential weights, provide optimal satisficement of NFR objectives. Experimental results suggest that using an SAS goal model enhanced with search-based optimization significantly improves system performance when compared with manually- and randomly-generated weights and subgoals.",
isbn="978-3-319-99241-9",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-99241-9_9"
}
@InProceedings{10.1007/978-3-030-21290-2_10,
author="Veleda, Rodrigo
and Cysneiros, Luiz Marcio",
editor="Giorgini, Paolo
and Weber, Barbara",
title="Towards an Ontology-Based Approach for Eliciting Possible Solutions to Non-Functional Requirements",
booktitle="Advanced Information Systems Engineering",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="145--161",
abstract="Requirements Engineering plays a crucial role in the software development process. Many works have pointed out that Non-Functional Requirements (NFRs) are critical to the quality of software systems. NFRs, also known as quality requirements, can be difficult to elicit due to their subjective diversity nature. In this paper, we introduce the QR Framework which uses an ontology-based approach to support the collection of knowledge on possible solutions to implement NFRs, semi-automatically connecting related NFRs. Preliminary search mechanisms are provided in a tool to facilitate the identification of possible solutions to an NFR and their related consequences to other solutions and/or other NFRs. To evaluate whether our approach aids eliciting NFRs, we conducted a controlled experiment performing a software development scenario. Our results suggest that reusing NFR knowledge can drive software engineers to obtain a closer to complete set of possible solutions to address quality concerns.",
isbn="978-3-030-21290-2",
url_article="https://link.springer.com/chapter/10.1007/978-3-030-21290-2_10"
}
@InProceedings{10.1007/978-3-642-13051-9_23,
author="Santos, Emanuel
and Pimentel, Jo{\~a}o
and Castro, Jaelson
and S{\'a}nchez, Juan
and Pastor, Oscar",
editor="Bider, Ilia
and Halpin, Terry
and Krogstie, John
and Nurcan, Selmin
and Proper, Erik
and Schmidt, Rainer
and Ukor, Roland",
title="Configuring the Variability of Business Process Models Using Non-Functional Requirements",
booktitle="Enterprise, Business-Process and Information Systems Modeling",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="274--286",
abstract="The existence of variations in the organizational environment makes the configuration of business process models a complex activity, even for experienced business analysts. The increasing adoption of business processes models by software engineers as a input for requirements analysis strengthens the importance of adressing this issue. The challenge is to configure business processes to fit the organization better. We propose an approach that combines variability analysis and non-functional requirements to drive the configuration of a business process. Applying this approach we can analyze variability in the model in order to assess the impact of the choices on the process quality constraints - the non-functional requirements. Moreover, it provides a rationale for the selection of a specific configuration.",
isbn="978-3-642-13051-9",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-13051-9_23"
}
@InProceedings{10.1007/978-3-319-91186-1_35,
author="Mecibah, Zina
and Boutekkouk, Fateh",
editor="Silhavy, Radek",
title="Towards Requirements Engineering Process for Self-adaptive Embedded Systems",
booktitle="Software Engineering and Algorithms in Intelligent Systems",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="338--345",
abstract="At present, there are a large number of embedded systems (ES) which need to modify their behavior at run time in response to changing environmental conditions (sensor failures, noisy networks, malicious threats, unexpected input{\ldots}etc.) or in the cases where the requirements themselves needs to change. i.e. ES require self-adaptive capabilities. This kind of ES has been widely used in different domain, for instance in the smart home systems, automotive systems, telecommunication systems, environmental monitoring and others. Unfortunately, up to now, there are few researchers which interest for the high level design process of the self-adaptive embedded systems (SAES) specifically in the field of requirement engineering (RE). For this reason, the objectives of this paper is to try as much as possible to recall and compare between existing works build around the RE of SAES in the sake of identifying advantages and weak points of each work.",
isbn="978-3-319-91186-1",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-91186-1_35"
}
@InProceedings{10.1007/978-3-642-34002-4_34,
author="Dalpiaz, Fabiano
and Serral, Estefan{\'i}a
and Valderas, Pedro
and Giorgini, Paolo
and Pelechano, Vicente",
editor="Atzeni, Paolo
and Cheung, David
and Ram, Sudha",
title="A NFR-Based Framework for User-Centered Adaptation",
booktitle="Conceptual Modeling",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="439--448",
abstract="Pervasive environments support users' daily routines in an invisible and unobtrusive way. To do so, they include a technical pervasive infrastructure, which is aware of and adaptive to both the operational context and the users at hand. Non-Functional Requirements (NFRs) have been effectively used to inform decision-making in software engineering: functional alternatives are compared in terms of their contribution to NFRs satisfaction. In this work, we consider user preferences over NFRs as a key driver for the adaptation of a pervasive infrastructure. We devise a model-driven framework for building pervasive systems that maximize fitness with the context and the user. Our contributions are: (i) adaptive task models, a conceptual model to describe user routines that accounts for user preferences over NFRs; and (ii) an adaptation framework, which uses our models at runtime to guide a pervasive infrastructure in adapting its behaviour to user preferences and context.",
isbn="978-3-642-34002-4",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-34002-4_34"
}
@Inbook{Ernst2014,
author="Ernst, Neil
and Borgida, Alexander
and Jureta, Ivan J.
and Mylopoulos, John",
editor="Mens, Tom
and Serebrenik, Alexander
and Cleve, Anthony",
title="An Overview of Requirements Evolution",
bookTitle="Evolving Software Systems",
year="2014",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="3--32",
abstract="Changing requirements are widely regarded as one of the most significant risks for software systems development. However, in today's business landscape, these changing requirements also represent opportunities to exploit new and evolving business conditions. In consonance with other agile methods, we advocate requirements engineering techniques that embrace and accommodate requirements change. This agile approach to requirements must nonetheless be systematic and incorporate some degree of planning, especially with respect to accommodating quality attributes such as safety and security. This chapter examines the nature of requirements evolution, and the two main problems that it entails. The first is to correctly understand what is changing in the requirements, that is, the elicitation problem. The other is to act on that new information using models and other representations of the requirements, influencing the architecture and implementation of the software system. This chapter first motivates the importance of considering changing requirements in evolving software systems. It then surveys historical and existing approaches to requirements evolution with respect to the elicitation and taking action problems. Finally, the chapter describes a framework for supporting requirements evolution, defining the Requirements Evolution Problem as finding new specifications to satisfy changed requirements and domain assumptions. To motivate this, we discuss a real-life case study of the payment card industry.",
isbn="978-3-642-45398-4",
doi="10.1007/978-3-642-45398-4_1",
url="https://doi.org/10.1007/978-3-642-45398-4_1",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-45398-4_1"
}
@Inbook{Welsh2014,
author="Welsh, Kris
and Bencomo, Nelly
and Sawyer, Pete
and Whittle, Jon",
editor="Kowalczyk, Ryszard
and Nguyen, Ngoc Thanh",
title="Self-Explanation in Adaptive Systems Based on Runtime Goal-Based Models",
bookTitle="Transactions on Computational Collective Intelligence XVI",
year="2014",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="122--145",
abstract="The behaviour of self adaptive systems can be emergent, which means that the system's behaviour may be seen as unexpected by its customers and its developers. Therefore, a self-adaptive system needs to garner confidence in its customers and it also needs to resolve any surprise on the part of the developer during testing and maintenance. We believe that these two functions can only be achieved if a self-adaptive system is also capable of self-explanation. We argue a self-adaptive system's behaviour needs to be explained in terms of satisfaction of its requirements. Since self-adaptive system requirements may themselves be emergent, we propose the use of goal-based requirements models at runtime to offer self-explanation of how a system is meeting its requirements. We demonstrate the analysis of run-time requirements models to yield a self-explanation codified in a domain specific language, and discuss possible future work.",
isbn="978-3-662-44871-7",
doi="10.1007/978-3-662-44871-7_5",
url="https://doi.org/10.1007/978-3-662-44871-7_5",
url_article="https://link.springer.com/chapter/10.1007/978-3-662-44871-7_5"
}
@Inbook{Ramaswamy2020,
author="Ramaswamy, Arunkumar
and Monsuez, Bruno
and Tapus, Adriana",
editor="Bonsignorio, Fabio
and Messina, Elena
and del Pobil, Angel P.
and Hallam, John",
title="Formal Specification of Robotic Architectures for Experimental Robotics",
bookTitle="Metrics of Sensory Motor Coordination and Integration in Robots and Animals: How to Measure the Success of Bioinspired Solutions with Respect to their Natural Models, and Against More `Artificial' Solutions?",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="15--37",
abstract="Robotic systems are becoming more safety critical systems as they are deployed in unstructured human-centered environments. These software intensive systems are composed of distributed, heterogeneous software components interacting in a highly dynamic, uncertain environment. However, no systematic software development process is followed in robotics research. This is a real barrier for system level performance analysis and reasoning, which are in turn required for scalable bench-marking methods and reusing existing software. This chapter provides an end-to-end overview on how robotic software systems can be formally specified from requirement modeling, through solution space exploration, and architecture modeling, and finally to generate executable code. The process is based on SafeRobots framework---a model-driven toolchain for designing software for robotics. Several domain-specific modeling languages that are developed as a part of this integrated approach are also discussed.",
isbn="978-3-030-14126-4",
doi="10.1007/978-3-030-14126-4_2",
url="https://doi.org/10.1007/978-3-030-14126-4_2",
url_article="https://link.springer.com/chapter/10.1007/978-3-030-14126-4_2"
}
@Inbook{Bitelli2015,
author="Bitelli, Claudio
and Desideri, Lorenzo
and Malavasi, Massimiliano",
editor="And{\`o}, Bruno
and Siciliano, Pietro
and Marletta, Vincenzo
and Monteri{\`u}, Andrea",
title="A Quality Model for Service Delivery in AAL and AT Provision",
bookTitle="Ambient Assisted Living: Italian Forum 2014",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="3--10",
abstract="The effectiveness of services providing assistive technology (AT) and Ambient Assisted Living (AAL) solutions is crucial to the success of any intervention. Centres specialized in AT and AAL are generally part of a complex network of public services and are integrated within the rehabilitation, education and assistance processes aimed at people with disabilities and the elderly which require the involvement of different professionals. The service of providing AT and AAL solutions is therefore a complex process which needs a multidisciplinary approach requiring specific models for the analysis of quality. To date, there is a lack of research in the AAL field targeting quality assessment of AAL interventions. The present paper describes a model for AAL quality assessment and provides preliminary data on its usefulness in practice.",
isbn="978-3-319-18374-9",
doi="10.1007/978-3-319-18374-9_1",
url="https://doi.org/10.1007/978-3-319-18374-9_1",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-18374-9_1"
}
@Inbook{Mei2016,
author="Mei, Hong
and L{\"u}, Jian",
title="On Requirements Model Driven Adaption and Evolution of Internetware",
bookTitle="Internetware: A New Software Paradigm for Internet Computing",
year="2016",
publisher="Springer Singapore",
address="Singapore",
pages="93--112",
abstract="Today's software systems need to support complex business operations and processes. The development of the web-based software systems has been pushing up the limits of traditional software engineering methodologies and technologies as they are required to be used and updated almost real-time, so that users can interact and share the same applications over the internet as needed. As a consequence, we are expecting a major paradigm shift in software engineering to reflect such changes in computing environment in order to better address the fundamental needs of organisations in this new era. Existing software technologies, such as model driven development, business process engineering, online (re-) configuration, composition and adaptation of managerial functionalities are being ``repurposed'' to reduce the time taken for software development by reusing software codes. In retrospect to the ten years applied research on Internetware, we have witnessed such a paradigm shift, which brings about many changes to the developmental experience of conventional web applications. Several related technologies, such as cloud computing, service computing, cyber-physical systems and social computing, have converged to address this emerging issue with emphasis on different aspects. In this chapter, we first outline the requirements that the Internetware software paradigm should meet to excel at web application adaptation; we then propose a requirement model driven method for adaptive and evolutionary applications; and we report our experiences and case studies of applying it to an enterprise information system. Our goal is to provide high-level guidelines to researchers and practitioners to meet the challenges of building adaptive industrial-strength applications with a spectrum of processes, techniques and facilities provided within the Internetware paradigm.",
isbn="978-981-10-2546-4",
doi="10.1007/978-981-10-2546-4_5",
url="https://doi.org/10.1007/978-981-10-2546-4_5",
url_article="https://link.springer.com/chapter/10.1007/978-981-10-2546-4_5"
}
@Article{Liu2014,
author="Liu, Lin
and Yang, Chen
and Wang, JianMin
and Ye, XiaoJun
and Liu, YingBo
and Yang, HongJi
and Liu, XiaoDong",
title="Requirements model driven adaption and evolution of Internetware",
journal="Science China Information Sciences",
year="2014",
month="Jun",
day="01",
volume="57",
number="6",
pages="1--19",
abstract="Today's software systems need to support complex business operations and processes. The development of the web-based software systems has been pushing up the limits of traditional software engineering methodologies and technologies as they are required to be used and updated almost real-time, so that users can interact and share the same applications over the internet as needed. These applications have to adapt quickly to the diversified and dynamic changing requirements in the physical, technological, economical and social environments. As a consequence, we are expecting a major paradigm shift in software engineering to reflect such changes in computing environment in order to better address the fundamental needs of organisations in this new era. Existing software technologies, such as model driven development, business process engineering, online (re-)configuration, composition and adaptation of managerial functionalities are being repurposed to reduce the time taken for software development by reusing software codes. The ability to dynamically combine contents from numerous web sites and local resources, and the ability to instantly publish services worldwide have opened up entirely new possibilities for software development. In retrospect to the ten years applied research on Internetware, we have witnessed such a paradigm shift, which brings about many changes to the developmental experience of conventional web applications. Several related technologies, such as cloud computing, service computing, cyber-physical systems and social computing, have converged to address this emerging issue with emphasis on different aspects. In this paper, we first outline the requirements that the Internetware software paradigm should meet to excel at web application adaptation; we then propose a requirement model driven method for adaptive and evolutionary applications; and we report our experiences and case studies of applying it to an enterprise information system. Our goal is to provide high-level guidelines to researchers and practitioners to meet the challenges of building adaptive industrial-strength applications with the spectrum of processes, techniques and facilities provided within the Internetware paradigm.",
issn="1869-1919",
doi="10.1007/s11432-014-5064-1",
url="https://doi.org/10.1007/s11432-014-5064-1",
url_article="https://link.springer.com/article/10.1007/s11432-014-5064-1"
}
@InProceedings{10.1007/978-3-642-02050-6_6,
author="Welsh, Kristopher
and Sawyer, Pete",
editor="Glinz, Martin
and Heymans, Patrick",
title="Requirements Tracing to Support Change in Dynamically Adaptive Systems",
booktitle="Requirements Engineering: Foundation for Software Quality",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="59--73",
abstract="[Context and motivation] All systems are susceptible to the need for change, with the desire to operate in changeable environments driving the need for software adaptation. A Dynamically Adaptive System (DAS) adjusts its behaviour autonomously at runtime in order to accommodate changes in its operating environment, which are anticipated in the system's requirements specification. [Question/Problem] In this paper, we argue that Dynamic Adaptive Systems' requirements specifications are more susceptible to change than those of traditional static systems. We propose an extension to i* strategic rationale models to aid in changing a DAS. [Principal Ideas/Results] By selecting some of the types of tracing proposed for the most complex systems and supporting them for DAS modelling, it becomes possible to handle change to a DAS' requirements efficiently, whilst still allowing artefacts to be stored in a Requirements Management tool to mitigate additional complexity. [Contribution] The paper identifies different classes of change that a DAS' requirements may be subjected to, and illustrates with a case study how additional tracing information can support the making of each class of change.",
isbn="978-3-642-02050-6",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-02050-6_6"
}
@Article{Oriol2020,
author="Oriol, Marc
and Mart{\'i}nez-Fern{\'a}ndez, Silverio
and Behutiye, Woubshet
and Farr{\'e}, Carles
and Kozik, Rafa{\l}
and Sepp{\"a}nen, Pertti
and Vollmer, Anna Maria
and Rodr{\'i}guez, Pilar
and Franch, Xavier
and Aaramaa, Sanja
and Abherv{\'e}, Antonin
and Chora{\'{s}}, Micha{\l}
and Partanen, Jari",
title="Data-driven and tool-supported elicitation of quality requirements in agile companies",
journal="Software Quality Journal",
year="2020",
month="Mar",
day="17",
abstract="Quality requirements (QRs) are a key artifact needed to ensure the quality and success of a software system. Despite their importance, QRs rarely get the same degree of attention as their functional counterpart in agile software development (ASD) projects. Moreover, crucial information that can be obtained from software development repositories (e.g., JIRA, GitHub) is not fully exploited, or is even neglected, in QR elicitation activities. In this work, we present a data-driven tooled approach for the semi-automatic generation and documentation of QRs in the context of ASD. The approach is based on the declaration of thresholds over quality-related issues, whose violation triggers user-defined alerts. These alerts are used to browse a catalog of QR patterns that are presented to the ASD team by means of a dashboard that implements several analysis techniques. Once selected, the patterns generate the QRs, which are documented and stored in the product backlog. The full approach is implemented via a configurable platform. Over the course of 1 year, four companies differing in size and profile followed this approach and deployed the platform in their premises to semi-automatically generate QRs in several projects. We used standardized measurement instruments to elicit the perception of 22 practitioners regarding their use of the tool. The quantitative and qualitative analyses yielded positive results; i.e., the practitioners' perception with regard to the tool's understandability, reliability, usefulness, and relevance was positive. We conclude that the results show potential for future adoption of data-driven elicitation of QRs in agile companies and encourage other practitioners to use the presented tool and adopt it in their companies.",
issn="1573-1367",
doi="10.1007/s11219-020-09509-y",
url="https://doi.org/10.1007/s11219-020-09509-y",
url_article="https://link.springer.com/article/10.1007/s11219-020-09509-y"
}
@Article{Pimentel2012,
author="Pimentel, Jo{\~a}o
and Lucena, M{\'a}rcia
and Castro, Jaelson
and Silva, Carla
and Santos, Emanuel
and Alencar, Fernanda",
title="Deriving software architectural models from requirements models for adaptive systems: the STREAM-A approach",
journal="Requirements Engineering",
year="2012",
month="Nov",
day="01",
volume="17",
number="4",
pages="259--281",
abstract="Some quality attributes are known to have an impact on the overall architecture of a system, so that they are required to be properly handled from the early beginning of the software development. For example, adaptability is a key concern for autonomic and adaptive systems, which brings to them the capability to alter their behavior in response to changes on their surrounding environments. In this paper, we propose a Strategy for Transition between Requirements and Architectural Models for Adaptive systems (STREAM-A). In particular, we use goal models based on the i* (i-Star) framework to support the design and evolution of systems that require adaptability. To obtain software architectures for such systems, the STREAM-A approach uses model transformations from i* models to architectural models expressed in Acme. Both the requirements and the architectural model are refined to accomplish the adaptability requirement.",
issn="1432-010X",
doi="10.1007/s00766-011-0126-z",
url="https://doi.org/10.1007/s00766-011-0126-z",
url_article="https://link.springer.com/article/10.1007/s00766-011-0126-z"
}
@Article{Abeywickrama2020,
author="Abeywickrama, Dhaminda B.
and Bicocchi, Nicola
and Mamei, Marco
and Zambonelli, Franco",
title="The SOTA approach to engineering collective adaptive systems",
journal="International Journal on Software Tools for Technology Transfer",
year="2020",
month="Aug",
day="01",
volume="22",
number="4",
pages="399--415",
abstract="The emergence of collective adaptive systems---i.e., computational systems made up of an ensemble of autonomous components that have to operate in a coordinated and adaptive way in open-ended and unpredictable environments---calls for innovative modeling and software engineering tools, to support their systematic and rigorous design and development. In this paper, we present a general model for collective adaptive systems called SOTA (``State Of The Affairs''). SOTA brings together the lessons of goal-oriented requirements modeling, context-aware system modeling, and dynamical systems modeling. It has the potential for acting as a general reference model to help tackling some key issues in the design and development of collective adaptive systems. In particular, as we will show with reference to a scenario of collectives of autonomous vehicles, SOTA enables: early verification of requirements, identification of knowledge requirements for self-adaptation, and the identification of the most suitable architectural patterns for self-adaptation.",
issn="1433-2787",
doi="10.1007/s10009-020-00554-3",
url="https://doi.org/10.1007/s10009-020-00554-3",
url_article="https://link.springer.com/article/10.1007/s10009-020-00554-3"
}
@Inbook{Turban2013,
author="Turban, Bernhard",
title="General Context and Theories",
bookTitle="Tool-Based Requirement Traceability between Requirement and Design Artifacts",
year="2013",
publisher="Springer Fachmedien Wiesbaden",
address="Wiesbaden",
pages="11--157",
abstract="This part shall provide the fundamental understanding of most core concepts involved in the construct of ideas leading to this thesis and its results. Consequently, the following chapters provide an overview over the major research fields having influence on the outcome of this thesis. If employed, requirements traceability can be seen as a crosscutting concern of all development activities. Correspondingly these chapters strive a considerable set of very different general research disciplines.",
isbn="978-3-8348-2474-5",
doi="10.1007/978-3-8348-2474-5_2",
url="https://doi.org/10.1007/978-3-8348-2474-5_2",
url_article="https://link.springer.com/chapter/10.1007/978-3-8348-2474-5_2"
}
@InProceedings{10.1007/978-981-10-7796-8_4,
author="Kaiya, Haruhiko
and Yoshioka, Nobukazu
and Washizaki, Hironori
and Okubo, Takao
and Hazeyama, Atsuo
and Ogata, Shinpei
and Tanaka, Takafumi",
editor="Kamalrudin, Massila
and Ahmad, Sabrina
and Ikram, Naveed",
title="Eliciting Requirements for Improving Users' Behavior Using Transparency",
booktitle="Requirements Engineering for Internet of Things",
year="2018",
publisher="Springer Singapore",
address="Singapore",
pages="41--56",
abstract="A software system is developed for satisfying requirements of stakeholders. Each requirement will be never satisfied without the collaboration of several components such as the system, devices and people interacting with them, i.e. users. However, a user does not or cannot always behave toward the other components according to their expectations. For example, a user sometimes makes mistake or even misuse of the system. The system thus has to encourage users to behave according to such expectations as well as possible. In this paper, we propose a method for eliciting software requirements that will improve users' behavior with respect to the expectations. We rely on transparency, i.e. the open flow of information amongst stakeholders because no one can directly manipulate users but transparency has an influence on users' behavior. We expect users will voluntarily behave better than ever when the system provides suitable information flows. We represent our method by using KAOS goal modeling notation, and show examples how it works.",
isbn="978-981-10-7796-8",
url_article="https://link.springer.com/chapter/10.1007/978-981-10-7796-8_4"
}
@InProceedings{10.1007/978-3-642-14192-8_2,
author="Welsh, Kristopher
and Sawyer, Pete",
editor="Wieringa, Roel
and Persson, Anne",
title="Understanding the Scope of Uncertainty in Dynamically Adaptive Systems ",
booktitle="Requirements Engineering: Foundation for Software Quality",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="2--16",
abstract="[Context and motivation] Dynamically adaptive systems are increasingly conceived as a means to allow operation in changeable or poorly understood environments. [Question/problem] This can result in the selection of solution strategies based on assumptions that may not be well founded. [Principle ideas/results] This paper proposes the use of claims in goal models as a means to reason about likely sources of uncertainty in dynamically adaptive systems. Accepting that such claims can't be easily validated at design-time, we should instead evaluate how the system will behave if a claim is proven false by developing a validation scenario. [Contribution] Validation scenarios may be costly to evaluate so the approach we advocate is designed to carefully select only those claims that are less certain, or whose falsification would have serious consequences.",
isbn="978-3-642-14192-8",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-14192-8_2"
}
@InProceedings{10.1007/978-3-319-14980-6_7,
author="Salgado, Carlos E.
and Teixeira, Juliana
and Santos, Nuno
and Machado, Ricardo J.
and Maciel, Rita S. P.",
editor="N{\'o}voa, Henriqueta
and Dr{\u{a}}goicea, Monica",
title="A SoaML Approach for Derivation of a Process-Oriented Logical Architecture from Use Cases",
booktitle="Exploring Services Science",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="80--94",
abstract="Designing logical architectures for cloud computing environments can be a complex endeavor, moreover when facing ill-defined contexts or insufficient inputs to requirements elicitation. Existing solutions are no longer enough to embrace challenges brought by complex scenarios and multi-stakeholder realities, as in Ambient Assisted Living ecosystems. As new concepts and cross-domain solutions emerge, these problems are tackled by connecting evermore the world of requirements and architectures, of business and technology, through service-oriented approaches. This due, we propose to extend the Four-Step-Rule-Set (4SRS) method, which has proven successful in generating a proper candidate logical architecture for an information system in ill-defined contexts, to a Service-Oriented Architecture approach for greater business integration, flexibility, and agility, by using the SoaML language. We present the result of a demonstration project, based in an industrial live setting where the 4SRS-SoaML reshaped method was applied, by generating the architectural participants, and respective channels of services and requests.",
isbn="978-3-319-14980-6",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-14980-6_7"
}
@Inbook{Hölzl2015,
author="H{\"o}lzl, Matthias
and Koch, Nora
and Puviani, Mariachiara
and Wirsing, Martin
and Zambonelli, Franco",
editor="Wirsing, Martin
and H{\"o}lzl, Matthias
and Koch, Nora
and Mayer, Philip",
title="The Ensemble Development Life Cycle and Best Practices for Collective Autonomic Systems",
bookTitle="Software Engineering for Collective Autonomic Systems: The ASCENS Approach",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="325--354",
abstract="Collective autonomic systems are adaptive, open-ended, highly parallel, interactive and distributed software systems. Their key features are so-called self-* properties, such as self-awareness, self-adaptation, self-expression, self-healing and self-management. We propose a software development life cycle that helps developers to engineer adaptive behavior and to address the issues posed by the diversity of self-* properties. The life cycle is characterized by three feedback loops, i.e. based on verification at design time, based on monitoring and awareness in the runtime, and the feedback provided by runtime data to the design phases. We illustrate how the life cycle can be instantiated using specific languages, methods and tools developed within the ASCENS project. In addition, a pattern catalog for the development of collective autonomic systems is presented to ease the engineering process.",
isbn="978-3-319-16310-9",
doi="10.1007/978-3-319-16310-9_9",
url="https://doi.org/10.1007/978-3-319-16310-9_9",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-16310-9_9"
}
@Article{Gutierrez2019,
author="Gutierrez, Francisco J.
and Mu{\~{n}}oz, Diego
and Ochoa, Sergio F.
and Tapia, Jos{\'e} M.",
title="Assembling mass-market technology for the sake of wellbeing: a case study on the adoption of ambient intelligent systems by older adults living at home",
journal="Journal of Ambient Intelligence and Humanized Computing",
year="2019",
month="Jun",
day="01",
volume="10",
number="6",
pages="2213--2233",
abstract="Everyday more and more ubiquitous applications are developed to support aging in place and ambient assisted living. Although these technologies typically adhere to the functional requirements defined by their developers, many of these solutions evidence limitations for being adopted by end-users, i.e., older adults. This paper reports the authors' experience in the design and deployment of several iterations of the SocialConnector system---a computer-supported family communication mediator---as a case study that helps identify key factors that ease the adoption of ambient intelligent systems encouraging intergenerational family communication at home. The particularity of the followed approach is to assemble widely available mass-market technology---such as commercial Tablet PCs and TV displays---glued together with innovative software, as a way to drive system adoption through economically affordable hardware running over empirically-driven considerations for designing effective software in this study domain. The case study results help researchers and practitioners to conceive technology that has a better chance of being embraced by older adults and their supporting family networks; particularly, when such a technology is going to be deployed in their homes. Therefore, the key design factors identified in this paper can be used to inform the conception and modeling of ambient intelligent systems that help older adults address several aspects of their aging in place process, like health monitoring, personal security, social engagement, support to daily activities, and ultimately, fostering wellbeing.",
issn="1868-5145",
doi="10.1007/s12652-017-0591-4",
url="https://doi.org/10.1007/s12652-017-0591-4",
url_article="https://link.springer.com/article/10.1007/s12652-017-0591-4"
}
@InProceedings{10.1007/978-3-319-23727-5_17,
author="Pahl, Claus
and Jamshidi, Pooyan",
editor="Weyns, Danny
and Mirandola, Raffaela
and Crnkovic, Ivica",
title="Software Architecture for the Cloud -- A Roadmap Towards Control-Theoretic, Model-Based Cloud Architecture",
booktitle="Software Architecture",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="212--220",
abstract="The cloud is a distributed architecture providing resources as tiered services. Through the principles of service-orientation and generally provided using virtualisation, the deployment and provisioning of applications can be managed dynamically, resulting in cloud platforms and applications as interdependent adaptive systems. Dynamically adaptive systems require a representation of requirements as dynamically manageable models, enacted through a controller implementing a feedback look based on a control-theoretic framework. We argue that a control theory and model-based architectural framework for the cloud is needed. While some critical aspects such as uncertainty have already been taken into account, what has not been accounted for are challenges resulting from the cloud architecture as a multi-tiered, distributed environment. We identify challenges and define a framework that aims at a better understanding and a roadmap towards control-theoretic, model-based cloud architecture -- driven by software architecture concerns.",
isbn="978-3-319-23727-5",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-23727-5_17"
}
@Article{Beghoura2017,
author="Beghoura, Mohamed Amine
and Boubetra, Abdelhak
and Boukerram, Abdallah",
title="Green software requirements and measurement: random decision forests-based software energy consumption profiling",
journal="Requirements Engineering",
year="2017",
month="Mar",
day="01",
volume="22",
number="1",
pages="27--40",
abstract="This paper proposes an explicit definition of green software requirements and a tool to support their evaluation. The proposed evaluation tool describes the green efficiency by considering the energy consumption as the main aspect to be studied during the development stage. This approach consists of building a multiple regression model, by using a supervised learning algorithm, in order to reproduce the energy consumption pattern of devices at different workload circumstances. The energy consumption model is then deployed to estimate the impact of software applications based on their resource usage. Our work has been validated on desktop and mobile devices. The experiments show the effectiveness of the proposed energy profiling tool that provided relevant information on the energy consumption of software applications.",
issn="1432-010X",
doi="10.1007/s00766-015-0234-2",
url="https://doi.org/10.1007/s00766-015-0234-2",
url_article="https://link.springer.com/article/10.1007/s00766-015-0234-2"
}
@Inbook{Bucchiarone2015,
author="Bucchiarone, Antonio
and Ehrig, Hartmut
and Ermel, Claudia
and Pelliccione, Patrizio
and Runge, Olga",
editor="De Nicola, Rocco
and Hennicker, Rolf",
title="Rule-Based Modeling and Static Analysis of Self-adaptive Systems by Graph Transformation",
bookTitle="Software, Services, and Systems: Essays Dedicated to Martin Wirsing on the Occasion of His Retirement from the Chair of Programming and Software Engineering",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="582--601",
abstract="Software systems nowadays require continuous operation despite changes both in user needs and in their operational environments. Self-adaptive systems are typically instrumented with tools to autonomously perform adaptation to these changes while maintaining some desired properties. In this paper we model and analyze self-adaptive systems by means of typed, attributed graph grammars. The interplay of different grammars representing the application and the adaptation logic is realized by an adaption manager. Within this formal framework we define consistency and operational properties that are maintained despite adaptations and we give static conditions for their verification. The overall approach is supported by the AGG tool for modeling, simulating, and analyzing graph transformation systems. A case study modeling a business process that adapts to changing environment conditions is used to demonstrate and validate the formal framework.",
isbn="978-3-319-15545-6",
doi="10.1007/978-3-319-15545-6_33",
url="https://doi.org/10.1007/978-3-319-15545-6_33",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-15545-6_33"
}
@Inbook{Franch2016,
author="Franch, Xavier
and L{\'o}pez, Lidia
and Cares, Carlos
and Colomer, Daniel",
editor="Karagiannis, Dimitris
and Mayr, Heinrich C.
and Mylopoulos, John",
title="The i* Framework for Goal-Oriented Modeling",
bookTitle="Domain-Specific Conceptual Modeling: Concepts, Methods and Tools",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="485--506",
abstract="i* is a widespread framework in the software engineering field that supports goal-oriented modeling of socio-technical systems and organizations. At its heart lies a language offering concepts such as actor, dependency, goal and decomposition. i* models resemble a network of interconnected, autonomous, collaborative and dependable strategic actors. Around this language, several analysis techniques have emerged, e.g., goal satisfaction analysis and metrics computation. In this work, we present a consolidated version of the i* language based on the most adopted versions of the language. We define the main constructs of the language and we articulate them in the form of a metamodel. Then, we implement this version and a concrete technique, goal satisfaction analysis based on goal propagation, using ADOxx. Throughout the chapter, we used an example based on open source software adoption to illustrate the concepts and test the implementation.",
isbn="978-3-319-39417-6",
doi="10.1007/978-3-319-39417-6_22",
url="https://doi.org/10.1007/978-3-319-39417-6_22",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-39417-6_22"
}
@InProceedings{10.1007/978-3-030-03424-5_6,
author="Abeywickrama, Dhaminda B.
and Mamei, Marco
and Zambonelli, Franco",
editor="Margaria, Tiziana
and Steffen, Bernhard",
title="Engineering Collectives of Self-driving Vehicles: The SOTA Approach",
booktitle="Leveraging Applications of Formal Methods, Verification and Validation. Distributed Systems",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="79--93",
abstract="Future cities will be populated by myriads of autonomous self-driving vehicles. Although individual vehicles have their own goals to pursue in autonomy, they may also be part of a collective of vehicles, as in the case of a fleet of vehicles of a car sharing company. Accordingly, they may also be required to act in a coordinated way towards the achievement of specific collective goals, or to meet specific city-level objectives. This raises the issue of properly engineering the behavior of such collective of vehicles, by properly capturing their collective requirements also in consideration of their individual goals, and understanding which knowledge about the state of the collective they must be provided with. In this context, this paper shows how the SOTA model can be a very effective tool to support the engineering of self-driving vehicle collectives. SOTA, by bringing together the lessons of goal-oriented requirements engineering, context-aware systems, and dynamical systems modeling, has indeed the potential for acting as a general reference model to help tackle some key issues in the design and development of complex collective systems immersed in dynamic environments, as collectives of self-driving vehicles are.",
isbn="978-3-030-03424-5",
url_article="https://link.springer.com/chapter/10.1007/978-3-030-03424-5_6"
}
@Inbook{Bergaus2015,
author="Bergaus, Martin",
title="Literature Review: ICT, SDPs and System Design for User Needs",
bookTitle="Design Issues for Service Delivery Platforms: Incorporate User Experience: A Grounded Theory Study of Individual User Needs",
year="2015",
publisher="Springer Fachmedien Wiesbaden",
address="Wiesbaden",
pages="27--94",
abstract="Chapter 2 provides a literature review, together with theoretical topics pertaining to Information System Theory, Information and Communication Technologies (ICT), Service Delivery Platforms and System Design for User needs, and relates current literature to all of the these topics within this investigation.",
isbn="978-3-658-10541-9",
doi="10.1007/978-3-658-10541-9_2",
url="https://doi.org/10.1007/978-3-658-10541-9_2",
url_article="https://link.springer.com/chapter/10.1007/978-3-658-10541-9_2"
}
@Inbook{Bennaceur2019,
author="Bennaceur, Amel
and Tun, Thein Than
and Yu, Yijun
and Nuseibeh, Bashar",
editor="Cha, Sungdeok
and Taylor, Richard N.
and Kang, Kyochul",
title="Requirements Engineering",
bookTitle="Handbook of Software Engineering",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="51--92",
abstract="Requirements engineering (RE) aims to ensure that systems meet the needs of their stakeholders including users, sponsors, and customers. Often considered as one of the earliest activities in software engineering, it has developed into a set of activities that touch almost every step of the software development process. In this chapter, we reflect on how the need for RE was first recognised and how its foundational concepts were developed. We present the seminal papers on four main activities of the RE process, namely, (1) elicitation, (2) modelling and analysis, (3) assurance, and (4) management and evolution. We also discuss some current research challenges in the area, including security requirements engineering as well as RE for mobile and ubiquitous computing. Finally, we identify some open challenges and research gaps that require further exploration.",
isbn="978-3-030-00262-6",
doi="10.1007/978-3-030-00262-6_2",
url="https://doi.org/10.1007/978-3-030-00262-6_2",
url_article="https://link.springer.com/chapter/10.1007/978-3-030-00262-6_2"
}
@InProceedings{10.1007/978-3-642-33666-9_5,
author="Ramirez, Andres J.
and Cheng, Betty H. C.
and Bencomo, Nelly
and Sawyer, Pete",
editor="France, Robert B.
and Kazmeier, J{\"u}rgen
and Breu, Ruth
and Atkinson, Colin",
title="Relaxing Claims: Coping with Uncertainty While Evaluating Assumptions at Run Time",
booktitle="Model Driven Engineering Languages and Systems",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="53--69",
abstract="Self-adaptation enables software systems to respond to changing environmental contexts that may not be fully understood at design time. Designing a dynamically adaptive system (DAS) to cope with this uncertainty is challenging, as it is impractical during requirements analysis and design time to anticipate every environmental condition that the DAS may encounter. Previously, the RELAX language was proposed to make requirements more tolerant to environmental uncertainty, and Claims were applied as markers of uncertainty that document how design assumptions affect goals. This paper integrates these two techniques in order to assess the validity of Claims at run time while tolerating minor and unanticipated environmental conditions that can trigger adaptations. We apply the proposed approach to the dynamic reconfiguration of a remote data mirroring network that must diffuse data while minimizing costs and exposure to data loss. Results show RELAXing Claims enables a DAS to reduce adaptation costs.",
isbn="978-3-642-33666-9",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-33666-9_5"
}
@InProceedings{10.1007/978-3-030-02852-7_11,
author="Ahmad, Manzoor
and Gnaho, Christophe
and Bruel, Jean-Michel
and Laleau, R{\'e}gine",
editor="Abdelwahed, El Hassan
and Bellatreche, Ladjel
and Benslimane, Djamal
and Golfarelli, Matteo
and Jean, St{\'e}phane
and Mery, Dominique
and Nakamatsu, Kazumi
and Ordonez, Carlos",
title="Towards a Requirements Engineering Approach for Capturing Uncertainty in Cyber-Physical Systems Environment",
booktitle="New Trends in Model and Data Engineering",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="115--129",
abstract="By nature, Cyber-physical systems are very often subjected to uncertainty events that can occur in their environment. This paper presents the first results of our work on how to deal with environment uncertainty in goal-based requirements engineering. This work is motivated by the fact that current goal-based approaches do not natively allow for unanticipated adaptations. To do so, we explore the introduction of RELAX concepts into SysMLKaos. RELAX is a Requirements Engineering language for Dynamically Adaptive Systems that includes explicit constructs to handle the inherent uncertainty in these systems. On the other hand, SysMLKaos is a Goal Based Requirements Engineering approach that takes into account Non-Functional Requirements at the same level of abstraction as Functional Requirements and models the impact of Non-Functional Requirements on Functional Requirements. We use an extract of a Landing Gear System case study to illustrate the proposed approach.",
isbn="978-3-030-02852-7",
url_article="https://link.springer.com/chapter/10.1007/978-3-030-02852-7_11"
}
@Inbook{Kazhamiakin2010,
author="Kazhamiakin, Raman
and Benbernou, Salima
and Baresi, Luciano
and Plebani, Pierluigi
and Uhlig, Maike
and Barais, Olivier",
editor="Papazoglou, Mike P.
and Pohl, Klaus
and Parkin, Michael
and Metzger, Andreas",
title="Adaptation of Service-Based Systems",
bookTitle="Service Research Challenges and Solutions for the Future Internet: S-Cube -- Towards Engineering, Managing and Adapting Service-Based Systems",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="117--156",
abstract="The advances in modern technology development and future technology changes dictate new challenges and requirements to the engineering and provision of services and service-based systems (SBS). These services and systems should become drastically more flexible; they should be able to operate and evolve in highly dynamic environments and to adequately react to various changes in these environments. In these settings, adaptability becomes a key feature of services as it provides a way for an application to continuously change itself in order to satisfy new contextual requirements.",
isbn="978-3-642-17599-2",
doi="10.1007/978-3-642-17599-2_5",
url="https://doi.org/10.1007/978-3-642-17599-2_5",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-17599-2_5"
}
@InProceedings{10.1007/978-3-540-92966-6_10,
author="Sutcliffe, Alistair",
editor="Lyytinen, Kalle
and Loucopoulos, Pericles
and Mylopoulos, John
and Robinson, Bill",
title="On the Inevitable Intertwining of Requirements and Architecture",
booktitle="Design Requirements Engineering: A Ten-Year Perspective",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="168--185",
abstract="The chapter investigates the relationship between architecture and requirements, arguing that architectural issues need to be addressed early in the RE process. Three trends are driving architectural implications for RE: the growth of intelligent, context-aware and adaptable systems. First the relationship between architecture and requirements is considered from a theoretical viewpoint of problem frames and abstract conceptual models. The relationships between architectural decisions and non-functional requirements is reviewed, and then the impact of architecture on the RE process is assessed using a case study of developing configurable, semi-intelligent software to support medical researchers in e-science domains.",
isbn="978-3-540-92966-6",
url_article="https://link.springer.com/chapter/10.1007/978-3-540-92966-6_10"
}
@InProceedings{10.1007/978-3-319-99241-9_9,
author="Bowers, Kate M.
and Fredericks, Erik M.
and Cheng, Betty H. C.",
editor="Colanzi, Thelma Elita
and McMinn, Phil",
title="Automated Optimization of Weighted Non-functional Objectives in Self-adaptive Systems",
booktitle="Search-Based Software Engineering",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="182--197",
abstract="A self-adaptive system (SAS) can reconfigure at run time in response to adverse combinations of system and environmental conditions in order to continuously satisfy its requirements. Moreover, SASs are subject to cross-cutting non-functional requirements (NFRs), such as performance, security, and usability, that collectively characterize how functional requirements (FRs) are to be satisfied. In many cases, the trigger for adapting an SAS may be due to a violation of one or more NFRs. For a given NFR, different combinations of hierarchically-organized FRs may yield varying degrees of satisfaction (i.e., satisficement). This paper presents Providentia, a search-based technique to optimize NFR satisficement when subjected to various sources of uncertainty (e.g., environment, interactions between system elements, etc.). Providentia searches for optimal combinations of FRs that, when considered with different subgoal decompositions and/or differential weights, provide optimal satisficement of NFR objectives. Experimental results suggest that using an SAS goal model enhanced with search-based optimization significantly improves system performance when compared with manually- and randomly-generated weights and subgoals.",
isbn="978-3-319-99241-9",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-99241-9_9"
}
@InProceedings{10.1007/978-3-030-21290-2_10,
author="Veleda, Rodrigo
and Cysneiros, Luiz Marcio",
editor="Giorgini, Paolo
and Weber, Barbara",
title="Towards an Ontology-Based Approach for Eliciting Possible Solutions to Non-Functional Requirements",
booktitle="Advanced Information Systems Engineering",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="145--161",
abstract="Requirements Engineering plays a crucial role in the software development process. Many works have pointed out that Non-Functional Requirements (NFRs) are critical to the quality of software systems. NFRs, also known as quality requirements, can be difficult to elicit due to their subjective diversity nature. In this paper, we introduce the QR Framework which uses an ontology-based approach to support the collection of knowledge on possible solutions to implement NFRs, semi-automatically connecting related NFRs. Preliminary search mechanisms are provided in a tool to facilitate the identification of possible solutions to an NFR and their related consequences to other solutions and/or other NFRs. To evaluate whether our approach aids eliciting NFRs, we conducted a controlled experiment performing a software development scenario. Our results suggest that reusing NFR knowledge can drive software engineers to obtain a closer to complete set of possible solutions to address quality concerns.",
isbn="978-3-030-21290-2",
url_article="https://link.springer.com/chapter/10.1007/978-3-030-21290-2_10"
}
@InProceedings{10.1007/978-3-642-13051-9_23,
author="Santos, Emanuel
and Pimentel, Jo{\~a}o
and Castro, Jaelson
and S{\'a}nchez, Juan
and Pastor, Oscar",
editor="Bider, Ilia
and Halpin, Terry
and Krogstie, John
and Nurcan, Selmin
and Proper, Erik
and Schmidt, Rainer
and Ukor, Roland",
title="Configuring the Variability of Business Process Models Using Non-Functional Requirements",
booktitle="Enterprise, Business-Process and Information Systems Modeling",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="274--286",
abstract="The existence of variations in the organizational environment makes the configuration of business process models a complex activity, even for experienced business analysts. The increasing adoption of business processes models by software engineers as a input for requirements analysis strengthens the importance of adressing this issue. The challenge is to configure business processes to fit the organization better. We propose an approach that combines variability analysis and non-functional requirements to drive the configuration of a business process. Applying this approach we can analyze variability in the model in order to assess the impact of the choices on the process quality constraints - the non-functional requirements. Moreover, it provides a rationale for the selection of a specific configuration.",
isbn="978-3-642-13051-9",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-13051-9_23"
}
@InProceedings{10.1007/978-3-319-91186-1_35,
author="Mecibah, Zina
and Boutekkouk, Fateh",
editor="Silhavy, Radek",
title="Towards Requirements Engineering Process for Self-adaptive Embedded Systems",
booktitle="Software Engineering and Algorithms in Intelligent Systems",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="338--345",
abstract="At present, there are a large number of embedded systems (ES) which need to modify their behavior at run time in response to changing environmental conditions (sensor failures, noisy networks, malicious threats, unexpected input{\ldots}etc.) or in the cases where the requirements themselves needs to change. i.e. ES require self-adaptive capabilities. This kind of ES has been widely used in different domain, for instance in the smart home systems, automotive systems, telecommunication systems, environmental monitoring and others. Unfortunately, up to now, there are few researchers which interest for the high level design process of the self-adaptive embedded systems (SAES) specifically in the field of requirement engineering (RE). For this reason, the objectives of this paper is to try as much as possible to recall and compare between existing works build around the RE of SAES in the sake of identifying advantages and weak points of each work.",
isbn="978-3-319-91186-1",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-91186-1_35"
}
@InProceedings{10.1007/978-3-642-34002-4_34,
author="Dalpiaz, Fabiano
and Serral, Estefan{\'i}a
and Valderas, Pedro
and Giorgini, Paolo
and Pelechano, Vicente",
editor="Atzeni, Paolo
and Cheung, David
and Ram, Sudha",
title="A NFR-Based Framework for User-Centered Adaptation",
booktitle="Conceptual Modeling",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="439--448",
abstract="Pervasive environments support users' daily routines in an invisible and unobtrusive way. To do so, they include a technical pervasive infrastructure, which is aware of and adaptive to both the operational context and the users at hand. Non-Functional Requirements (NFRs) have been effectively used to inform decision-making in software engineering: functional alternatives are compared in terms of their contribution to NFRs satisfaction. In this work, we consider user preferences over NFRs as a key driver for the adaptation of a pervasive infrastructure. We devise a model-driven framework for building pervasive systems that maximize fitness with the context and the user. Our contributions are: (i) adaptive task models, a conceptual model to describe user routines that accounts for user preferences over NFRs; and (ii) an adaptation framework, which uses our models at runtime to guide a pervasive infrastructure in adapting its behaviour to user preferences and context.",
isbn="978-3-642-34002-4",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-34002-4_34"
}
@Inbook{Ernst2014,
author="Ernst, Neil
and Borgida, Alexander
and Jureta, Ivan J.
and Mylopoulos, John",
editor="Mens, Tom
and Serebrenik, Alexander
and Cleve, Anthony",
title="An Overview of Requirements Evolution",
bookTitle="Evolving Software Systems",
year="2014",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="3--32",
abstract="Changing requirements are widely regarded as one of the most significant risks for software systems development. However, in today's business landscape, these changing requirements also represent opportunities to exploit new and evolving business conditions. In consonance with other agile methods, we advocate requirements engineering techniques that embrace and accommodate requirements change. This agile approach to requirements must nonetheless be systematic and incorporate some degree of planning, especially with respect to accommodating quality attributes such as safety and security. This chapter examines the nature of requirements evolution, and the two main problems that it entails. The first is to correctly understand what is changing in the requirements, that is, the elicitation problem. The other is to act on that new information using models and other representations of the requirements, influencing the architecture and implementation of the software system. This chapter first motivates the importance of considering changing requirements in evolving software systems. It then surveys historical and existing approaches to requirements evolution with respect to the elicitation and taking action problems. Finally, the chapter describes a framework for supporting requirements evolution, defining the Requirements Evolution Problem as finding new specifications to satisfy changed requirements and domain assumptions. To motivate this, we discuss a real-life case study of the payment card industry.",
isbn="978-3-642-45398-4",
doi="10.1007/978-3-642-45398-4_1",
url="https://doi.org/10.1007/978-3-642-45398-4_1",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-45398-4_1"
}
@Inbook{Welsh2014,
author="Welsh, Kris
and Bencomo, Nelly
and Sawyer, Pete
and Whittle, Jon",
editor="Kowalczyk, Ryszard
and Nguyen, Ngoc Thanh",
title="Self-Explanation in Adaptive Systems Based on Runtime Goal-Based Models",
bookTitle="Transactions on Computational Collective Intelligence XVI",
year="2014",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="122--145",
abstract="The behaviour of self adaptive systems can be emergent, which means that the system's behaviour may be seen as unexpected by its customers and its developers. Therefore, a self-adaptive system needs to garner confidence in its customers and it also needs to resolve any surprise on the part of the developer during testing and maintenance. We believe that these two functions can only be achieved if a self-adaptive system is also capable of self-explanation. We argue a self-adaptive system's behaviour needs to be explained in terms of satisfaction of its requirements. Since self-adaptive system requirements may themselves be emergent, we propose the use of goal-based requirements models at runtime to offer self-explanation of how a system is meeting its requirements. We demonstrate the analysis of run-time requirements models to yield a self-explanation codified in a domain specific language, and discuss possible future work.",
isbn="978-3-662-44871-7",
doi="10.1007/978-3-662-44871-7_5",
url="https://doi.org/10.1007/978-3-662-44871-7_5",
url_article="https://link.springer.com/chapter/10.1007/978-3-662-44871-7_5"
}
@Inbook{Ramaswamy2020,
author="Ramaswamy, Arunkumar
and Monsuez, Bruno
and Tapus, Adriana",
editor="Bonsignorio, Fabio
and Messina, Elena
and del Pobil, Angel P.
and Hallam, John",
title="Formal Specification of Robotic Architectures for Experimental Robotics",
bookTitle="Metrics of Sensory Motor Coordination and Integration in Robots and Animals: How to Measure the Success of Bioinspired Solutions with Respect to their Natural Models, and Against More `Artificial' Solutions?",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="15--37",
abstract="Robotic systems are becoming more safety critical systems as they are deployed in unstructured human-centered environments. These software intensive systems are composed of distributed, heterogeneous software components interacting in a highly dynamic, uncertain environment. However, no systematic software development process is followed in robotics research. This is a real barrier for system level performance analysis and reasoning, which are in turn required for scalable bench-marking methods and reusing existing software. This chapter provides an end-to-end overview on how robotic software systems can be formally specified from requirement modeling, through solution space exploration, and architecture modeling, and finally to generate executable code. The process is based on SafeRobots framework---a model-driven toolchain for designing software for robotics. Several domain-specific modeling languages that are developed as a part of this integrated approach are also discussed.",
isbn="978-3-030-14126-4",
doi="10.1007/978-3-030-14126-4_2",
url="https://doi.org/10.1007/978-3-030-14126-4_2",
url_article="https://link.springer.com/chapter/10.1007/978-3-030-14126-4_2"
}
@Inbook{Bitelli2015,
author="Bitelli, Claudio
and Desideri, Lorenzo
and Malavasi, Massimiliano",
editor="And{\`o}, Bruno
and Siciliano, Pietro
and Marletta, Vincenzo
and Monteri{\`u}, Andrea",
title="A Quality Model for Service Delivery in AAL and AT Provision",
bookTitle="Ambient Assisted Living: Italian Forum 2014",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="3--10",
abstract="The effectiveness of services providing assistive technology (AT) and Ambient Assisted Living (AAL) solutions is crucial to the success of any intervention. Centres specialized in AT and AAL are generally part of a complex network of public services and are integrated within the rehabilitation, education and assistance processes aimed at people with disabilities and the elderly which require the involvement of different professionals. The service of providing AT and AAL solutions is therefore a complex process which needs a multidisciplinary approach requiring specific models for the analysis of quality. To date, there is a lack of research in the AAL field targeting quality assessment of AAL interventions. The present paper describes a model for AAL quality assessment and provides preliminary data on its usefulness in practice.",
isbn="978-3-319-18374-9",
doi="10.1007/978-3-319-18374-9_1",
url="https://doi.org/10.1007/978-3-319-18374-9_1",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-18374-9_1"
}
@Inbook{Mei2016,
author="Mei, Hong
and L{\"u}, Jian",
title="On Requirements Model Driven Adaption and Evolution of Internetware",
bookTitle="Internetware: A New Software Paradigm for Internet Computing",
year="2016",
publisher="Springer Singapore",
address="Singapore",
pages="93--112",
abstract="Today's software systems need to support complex business operations and processes. The development of the web-based software systems has been pushing up the limits of traditional software engineering methodologies and technologies as they are required to be used and updated almost real-time, so that users can interact and share the same applications over the internet as needed. As a consequence, we are expecting a major paradigm shift in software engineering to reflect such changes in computing environment in order to better address the fundamental needs of organisations in this new era. Existing software technologies, such as model driven development, business process engineering, online (re-) configuration, composition and adaptation of managerial functionalities are being ``repurposed'' to reduce the time taken for software development by reusing software codes. In retrospect to the ten years applied research on Internetware, we have witnessed such a paradigm shift, which brings about many changes to the developmental experience of conventional web applications. Several related technologies, such as cloud computing, service computing, cyber-physical systems and social computing, have converged to address this emerging issue with emphasis on different aspects. In this chapter, we first outline the requirements that the Internetware software paradigm should meet to excel at web application adaptation; we then propose a requirement model driven method for adaptive and evolutionary applications; and we report our experiences and case studies of applying it to an enterprise information system. Our goal is to provide high-level guidelines to researchers and practitioners to meet the challenges of building adaptive industrial-strength applications with a spectrum of processes, techniques and facilities provided within the Internetware paradigm.",
isbn="978-981-10-2546-4",
doi="10.1007/978-981-10-2546-4_5",
url="https://doi.org/10.1007/978-981-10-2546-4_5",
url_article="https://link.springer.com/chapter/10.1007/978-981-10-2546-4_5"
}
@Article{Liu2014,
author="Liu, Lin
and Yang, Chen
and Wang, JianMin
and Ye, XiaoJun
and Liu, YingBo
and Yang, HongJi
and Liu, XiaoDong",
title="Requirements model driven adaption and evolution of Internetware",
journal="Science China Information Sciences",
year="2014",
month="Jun",
day="01",
volume="57",
number="6",
pages="1--19",
abstract="Today's software systems need to support complex business operations and processes. The development of the web-based software systems has been pushing up the limits of traditional software engineering methodologies and technologies as they are required to be used and updated almost real-time, so that users can interact and share the same applications over the internet as needed. These applications have to adapt quickly to the diversified and dynamic changing requirements in the physical, technological, economical and social environments. As a consequence, we are expecting a major paradigm shift in software engineering to reflect such changes in computing environment in order to better address the fundamental needs of organisations in this new era. Existing software technologies, such as model driven development, business process engineering, online (re-)configuration, composition and adaptation of managerial functionalities are being repurposed to reduce the time taken for software development by reusing software codes. The ability to dynamically combine contents from numerous web sites and local resources, and the ability to instantly publish services worldwide have opened up entirely new possibilities for software development. In retrospect to the ten years applied research on Internetware, we have witnessed such a paradigm shift, which brings about many changes to the developmental experience of conventional web applications. Several related technologies, such as cloud computing, service computing, cyber-physical systems and social computing, have converged to address this emerging issue with emphasis on different aspects. In this paper, we first outline the requirements that the Internetware software paradigm should meet to excel at web application adaptation; we then propose a requirement model driven method for adaptive and evolutionary applications; and we report our experiences and case studies of applying it to an enterprise information system. Our goal is to provide high-level guidelines to researchers and practitioners to meet the challenges of building adaptive industrial-strength applications with the spectrum of processes, techniques and facilities provided within the Internetware paradigm.",
issn="1869-1919",
doi="10.1007/s11432-014-5064-1",
url="https://doi.org/10.1007/s11432-014-5064-1",
url_article="https://link.springer.com/article/10.1007/s11432-014-5064-1"
}
@InProceedings{10.1007/978-3-642-02050-6_6,
author="Welsh, Kristopher
and Sawyer, Pete",
editor="Glinz, Martin
and Heymans, Patrick",
title="Requirements Tracing to Support Change in Dynamically Adaptive Systems",
booktitle="Requirements Engineering: Foundation for Software Quality",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="59--73",
abstract="[Context and motivation] All systems are susceptible to the need for change, with the desire to operate in changeable environments driving the need for software adaptation. A Dynamically Adaptive System (DAS) adjusts its behaviour autonomously at runtime in order to accommodate changes in its operating environment, which are anticipated in the system's requirements specification. [Question/Problem] In this paper, we argue that Dynamic Adaptive Systems' requirements specifications are more susceptible to change than those of traditional static systems. We propose an extension to i* strategic rationale models to aid in changing a DAS. [Principal Ideas/Results] By selecting some of the types of tracing proposed for the most complex systems and supporting them for DAS modelling, it becomes possible to handle change to a DAS' requirements efficiently, whilst still allowing artefacts to be stored in a Requirements Management tool to mitigate additional complexity. [Contribution] The paper identifies different classes of change that a DAS' requirements may be subjected to, and illustrates with a case study how additional tracing information can support the making of each class of change.",
isbn="978-3-642-02050-6",
url_article="https://link.springer.com/chapter/10.1007/978-3-642-02050-6_6"
}
@Article{Oriol2020,
author="Oriol, Marc
and Mart{\'i}nez-Fern{\'a}ndez, Silverio
and Behutiye, Woubshet
and Farr{\'e}, Carles
and Kozik, Rafa{\l}
and Sepp{\"a}nen, Pertti
and Vollmer, Anna Maria
and Rodr{\'i}guez, Pilar
and Franch, Xavier
and Aaramaa, Sanja
and Abherv{\'e}, Antonin
and Chora{\'{s}}, Micha{\l}
and Partanen, Jari",
title="Data-driven and tool-supported elicitation of quality requirements in agile companies",
journal="Software Quality Journal",
year="2020",
month="Mar",
day="17",
abstract="Quality requirements (QRs) are a key artifact needed to ensure the quality and success of a software system. Despite their importance, QRs rarely get the same degree of attention as their functional counterpart in agile software development (ASD) projects. Moreover, crucial information that can be obtained from software development repositories (e.g., JIRA, GitHub) is not fully exploited, or is even neglected, in QR elicitation activities. In this work, we present a data-driven tooled approach for the semi-automatic generation and documentation of QRs in the context of ASD. The approach is based on the declaration of thresholds over quality-related issues, whose violation triggers user-defined alerts. These alerts are used to browse a catalog of QR patterns that are presented to the ASD team by means of a dashboard that implements several analysis techniques. Once selected, the patterns generate the QRs, which are documented and stored in the product backlog. The full approach is implemented via a configurable platform. Over the course of 1 year, four companies differing in size and profile followed this approach and deployed the platform in their premises to semi-automatically generate QRs in several projects. We used standardized measurement instruments to elicit the perception of 22 practitioners regarding their use of the tool. The quantitative and qualitative analyses yielded positive results; i.e., the practitioners' perception with regard to the tool's understandability, reliability, usefulness, and relevance was positive. We conclude that the results show potential for future adoption of data-driven elicitation of QRs in agile companies and encourage other practitioners to use the presented tool and adopt it in their companies.",
issn="1573-1367",
doi="10.1007/s11219-020-09509-y",
url="https://doi.org/10.1007/s11219-020-09509-y",
url_article="https://link.springer.com/article/10.1007/s11219-020-09509-y"
}
@Article{Pimentel2012,
author="Pimentel, Jo{\~a}o
and Lucena, M{\'a}rcia
and Castro, Jaelson
and Silva, Carla
and Santos, Emanuel
and Alencar, Fernanda",
title="Deriving software architectural models from requirements models for adaptive systems: the STREAM-A approach",
journal="Requirements Engineering",
year="2012",
month="Nov",
day="01",
volume="17",
number="4",
pages="259--281",
abstract="Some quality attributes are known to have an impact on the overall architecture of a system, so that they are required to be properly handled from the early beginning of the software development. For example, adaptability is a key concern for autonomic and adaptive systems, which brings to them the capability to alter their behavior in response to changes on their surrounding environments. In this paper, we propose a Strategy for Transition between Requirements and Architectural Models for Adaptive systems (STREAM-A). In particular, we use goal models based on the i* (i-Star) framework to support the design and evolution of systems that require adaptability. To obtain software architectures for such systems, the STREAM-A approach uses model transformations from i* models to architectural models expressed in Acme. Both the requirements and the architectural model are refined to accomplish the adaptability requirement.",
issn="1432-010X",
doi="10.1007/s00766-011-0126-z",
url="https://doi.org/10.1007/s00766-011-0126-z",
url_article="https://link.springer.com/article/10.1007/s00766-011-0126-z"
}
@Article{Abeywickrama2020,
author="Abeywickrama, Dhaminda B.
and Bicocchi, Nicola
and Mamei, Marco
and Zambonelli, Franco",
title="The SOTA approach to engineering collective adaptive systems",
journal="International Journal on Software Tools for Technology Transfer",
year="2020",
month="Aug",
day="01",
volume="22",
number="4",
pages="399--415",
abstract="The emergence of collective adaptive systems---i.e., computational systems made up of an ensemble of autonomous components that have to operate in a coordinated and adaptive way in open-ended and unpredictable environments---calls for innovative modeling and software engineering tools, to support their systematic and rigorous design and development. In this paper, we present a general model for collective adaptive systems called SOTA (``State Of The Affairs''). SOTA brings together the lessons of goal-oriented requirements modeling, context-aware system modeling, and dynamical systems modeling. It has the potential for acting as a general reference model to help tackling some key issues in the design and development of collective adaptive systems. In particular, as we will show with reference to a scenario of collectives of autonomous vehicles, SOTA enables: early verification of requirements, identification of knowledge requirements for self-adaptation, and the identification of the most suitable architectural patterns for self-adaptation.",
issn="1433-2787",
doi="10.1007/s10009-020-00554-3",
url="https://doi.org/10.1007/s10009-020-00554-3",
url_article="https://link.springer.com/article/10.1007/s10009-020-00554-3"
}
@Inbook{Turban2013,
author="Turban, Bernhard",
title="General Context and Theories",
bookTitle="Tool-Based Requirement Traceability between Requirement and Design Artifacts",
year="2013",
publisher="Springer Fachmedien Wiesbaden",
address="Wiesbaden",
pages="11--157",
abstract="This part shall provide the fundamental understanding of most core concepts involved in the construct of ideas leading to this thesis and its results. Consequently, the following chapters provide an overview over the major research fields having influence on the outcome of this thesis. If employed, requirements traceability can be seen as a crosscutting concern of all development activities. Correspondingly these chapters strive a considerable set of very different general research disciplines.",
isbn="978-3-8348-2474-5",
doi="10.1007/978-3-8348-2474-5_2",
url="https://doi.org/10.1007/978-3-8348-2474-5_2",
url_article="https://link.springer.com/chapter/10.1007/978-3-8348-2474-5_2"
}
@InProceedings{10.1007/978-3-319-99241-9_9,
author="Bowers, Kate M.
and Fredericks, Erik M.
and Cheng, Betty H. C.",
editor="Colanzi, Thelma Elita
and McMinn, Phil",
title="Automated Optimization of Weighted Non-functional Objectives in Self-adaptive Systems",
booktitle="Search-Based Software Engineering",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="182--197",
abstract="A self-adaptive system (SAS) can reconfigure at run time in response to adverse combinations of system and environmental conditions in order to continuously satisfy its requirements. Moreover, SASs are subject to cross-cutting non-functional requirements (NFRs), such as performance, security, and usability, that collectively characterize how functional requirements (FRs) are to be satisfied. In many cases, the trigger for adapting an SAS may be due to a violation of one or more NFRs. For a given NFR, different combinations of hierarchically-organized FRs may yield varying degrees of satisfaction (i.e., satisficement). This paper presents Providentia, a search-based technique to optimize NFR satisficement when subjected to various sources of uncertainty (e.g., environment, interactions between system elements, etc.). Providentia searches for optimal combinations of FRs that, when considered with different subgoal decompositions and/or differential weights, provide optimal satisficement of NFR objectives. Experimental results suggest that using an SAS goal model enhanced with search-based optimization significantly improves system performance when compared with manually- and randomly-generated weights and subgoals.",
isbn="978-3-319-99241-9",
url_article="https://link.springer.com/chapter/10.1007/978-3-319-99241-9_9"
}
